[
	{
		"id": "1",
		"name": "Neutrify",
		"description": "I founded Neutrify to provide a tool to help control the news articles we see. It is a news aggregator that presents the news tagged with AI derived metrics to improve transparency and filterability. The application was distributed via the web and the Google Play store.<br><br>It is a full stack application built with AWS Amplify, AppSync, DynamoDB, and TypeScript ETL jobs running on Lambda. OAuth2.0 user account authentication is implemented using Amazon Cognito, and CI/CD is handled with AWS CodePipeline.<br><br><b>Note:</b> The Neutrify app was decommissioned at the end of 2021, but I have rehosted it for demonstration purposes on Cloudflare. The demo uses partially randomly generated mock articles.",
		"slug": "neutrify",
		"releaseDate": "2019-11-01T00:00:00.000Z",
		"updatedDate": "2025-03-20T00:00:00.000Z",
		"image": "neutrify",
		"presentationURL": "https://neutrify-demo.pages.dev/app",
		"repositoryURL": "https://github.com/a-j-olly/neutrify",
		"tagIds": ["2", "8", "1", "4", "6", "3", "9", "13", "14", "15", "19"]
	},
	{
		"id": "2",
		"name": "aaronjayoliver.com",
		"description": "A portfolio website developed using SvelteKit that serves as an advertisement of my professional web development skills. The UI design philosophy was to be bold but not garish; simple, yet feature complete.<br><br>The site has lightning fast load times due to it being fully pre-rendered. There is no supporting backend infrastructure, with the exception of hosting the application on Cloudflare. This results in a site that is free to maintain (within parameters), but with the drawback of needing to commit a code change whenever data must be updated.",
		"slug": "aaronjayoliver.com",
		"releaseDate": "2024-11-13T00:00:00.000Z",
		"updatedDate": "2025-04-05T00:00:00.000Z",
		"image": "aaronjayoliver",
		"repositoryURL": "https://github.com/a-j-olly/aaronjayoliver.com",
		"presentationURL": "https://aaronjayoliver.com",
		"tagIds": ["5", "3", "1", "7", "10", "17"]
	},
	{
		"id": "3",
		"name": "Asynchronous Rest API",
		"description": "This project demonstrates an asynchronous payment API built with AWS and Terraform, using serverless infrastructure. It was designed to be resilient, scalable and secure, as per the requirements of a payment gateway.<br><br>One of the most interesting features of this project is that the Terraform script that creates the API infrastructure takes its configuration from the OpenAPI schema. A justification for all the design decisions made for this architecture can be found in the README documentation found in this project's repository.",
		"slug": "asynchronous-rest-api",
		"releaseDate": "2024-03-21T00:00:00.000Z",
		"updatedDate": "2024-03-21T00:00:00.000Z",
		"image": "asyncRestAPI",
		"repositoryURL": "https://github.com/a-j-olly/async-payment-api",
		"tagIds": ["4", "8", "1", "3", "11", "12", "14", "15"]
	},
	{
		"id": "4",
		"name": "Serverless GraphQL API",
		"description": "This API was initally built to supply the project and tag information found on aaronjayoliver.com. It is now a tech demo for a serverless graphql api, integrated with a AWS Aurora Serverless V2 PostgreSQL DB.<br><br>One of the major drawbacks of serverless architecture is that your infrastructure can be 'cold', which means it needs to be initialised before it can respond to any requests. This is the cold start time, and it is exacerbated by the size of the package being intialised. GraphQL servers often contain middleware that bloats the package size, so choosing a lightweight one like GraphQL Yoga is vital for performance.",
		"slug": "serverless-graphql-api",
		"releaseDate": "2024-11-08T00:00:00.000Z",
		"updatedDate": "2024-11-08T00:00:00.000Z",
		"image": "serverlessGQLAPI",
		"repositoryURL": "https://github.com/a-j-olly/serverless-gql-api",
		"tagIds": ["4", "8", "1", "3", "12", "14", "16", "17"]
	},
	{
		"id": "5",
		"name": "Payment Gateway Library",
		"description": "This project was created as part of a coding challenge to develop a payment gateway library. The result is a library that makes idempotent transactions to a PostgreSQL database using Prisma ORM. It also provides basic logging, documentation and input validation to ensure robustness, and 95% test coverage using Vitest to ensure code reliability.",
		"slug": "payment-gateway-library",
		"releaseDate": "2024-06-13T00:00:00.000Z",
		"updatedDate": "2024-06-13T00:00:00.000Z",
		"image": "paymentGateway",
		"repositoryURL": "https://github.com/a-j-olly/payment-gateway-library",
		"tagIds": ["1", "3", "16", "17", "18"]
	},
	{
		"id": "6",
		"name": "Dice Roller MCP",
		"description": "Have you ever wondered whether your favorite AI assistant is *really* rolling random dice? This MCP (Model Context Protocol) server adds reliable dice rolling capabilities to AI assistants like Claude, supporting complex TTRPG mechanics including advantage rolls, ability score generation, and exploding dice.<br><br>Built to production standards using the TypeScript MCP SDK with JSON-RPC API, the server supports multiple transport methods (HTTP and stdio) and can be deployed via NPX, Docker, or direct installation. Input validation is handled through Zod schemas, ensuring robust and secure dice rolling operations.",
		"slug": "dice-roller-mcp",
		"releaseDate": "2025-08-02T00:00:00.000Z",
		"updatedDate": "2025-08-02T00:00:00.000Z",
		"image": "diceRollerMCP",
		"repositoryURL": "https://github.com/a-j-olly/dice-roller-mcp",
		"tagIds": ["1", "3", "17"]
	}
]
